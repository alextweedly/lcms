script "lcms_admin"

global gAdminConfig

global gParams, gData, gTheme
 


command test_auth
  pl the stacksinuse
  put lcmsIfLoggedIn(sUserName, sIsAdmin)
end test_auth

    	
local sBaseURL
command commonConfigSettings pPageName, pExtraSegment
  put "/igniter.lc/lcms_admin" into sBaseURL
  
    put $_COOKIE["upload_photo_messages"] into gData["uploadError"]
    put $_COOKIE["image_info"] into gData["image_info"]
    if gData["image_info"] is not empty then
      put JSONToArray(gData["image_info"]) into gData["image_info"]
    end if
    lcmsPutCookie "upload_photo_messages", "/", "OK"
    lcmsPutCookie "image_info", "/", empty
    
	getparams
--	printarray "in commonconfig", gParams
	
	put tolower(pPageName) into gData["activepage"]

	put 3 into NN
	if pExtraSegment then
	  	put lcmsFetchSegment(NN) into gParams["extra_segment"]
	  	add 1 to NN
	  	put "/" & pPageName after gData["baseURL"]
    	put tolower(gParams["page"]) into gData["activepage"]
	end if
	put lcmsFetchSegment(NN, empty) into tt
	if tt is FALSE then put empty into tt
	if gParams["_detail"] is empty AND tt is not empty then put tt into gParams["_detail"]

	add 1 to NN
	put lcmsFetchSegment(NN) into tt
	if tt is FALSE then put empty into tt
	if gParams["_pid"] is empty AND tt is not empty then put tt into gParams["_pid"]

    put gParams["_pid"] into gData["projectID"]
	
	get lcmsLoadDatabase()     
     
--    pl "cookie should be set to OK"
--    printarray "cos", $_COOKIE

end commonConfigSettings


function showlocalCommand pLabel, pAction
  return "<a href='" & sBaseURL & "/" & pAction & "'>" & pLabel & "</a>"
end showlocalCommand

-- THIS COMMAND WILL BE CALLED IF NONE IS SPECIFiED IN THE URI
local sUserName, sIsAdmin
command index
  put lcmsIfLoggedIn(sUserName, sIsAdmin, TRUE) into tLoggedIn
  if NOT tLoggedIn then
       -- REDIRECT TO LOGIN PAGE AND KEEP FLASHDATA IN CASE THERE IS ANY
     if rigSessFlashdata("message") <> FALSE then
      rigKeepSessFlashdata "message"					
     end if
     put "Not logged in!! Please login first at <a href='/igniter.lc/auth/login'>Login page</a>"
   
     exit to top
  end if

  commonConfigSettings "index", FALSE
  pl "Logged in as " && sUserName &".<br><br>" & CR
  if sIsAdmin then
    pl "You are an admin, so you can do many things here, or go to the auth page to manage users.<br><br>" & CR
  else
    pl "You are NOT an admin, so you can only do a few things here.<br><br>" & CR
  end if

  pl "You could <ul>" & cr
--   if sIsAdmin then pl "<li>" & showlocalCommand("Pages", "pages") & "</li>" & cr
  pl "Edit Pages. But Pages are now held as text files within user/pages', so you "
  pl "need to edit / synch those with your editor." & CR & CR
--  if sIsAdmin then pl "<li>" & showlocalCommand("Themes", "themes") & "</li>" & cr
  pl "Edit Themes. However Themes are now held as xxxView.lc files within lcms/Themes/THEMENAME', so you "
  pl "need to edit / synch those with your editor." & CR & CR
--  if sIsAdmin then pl "<li>" & showlocalCommand("Menus", "menus") & "</li>" & cr
  pl "Edit Menus. However Menus are now held in user/menus.txt, or simply deduced from the files in user/pages"
  pl "need to edit / synch those with your editor." & CR & CR
--  if sIsAdmin then pl "<li>" & showlocalCommand("Templates", "templates") & "</li>" & cr
  pl "Edit Templates. However Templatess are now held in user/templates', so you "
  pl "need to edit / synch those with your editor." & CR & CR
  pl ""
  if sIsAdmin then pl "<li>" & showlocalCommand("Edit a Custom Object database", "dbedit") & "</li>" & cr

  if sIsAdmin then pl "<li>" & showlocalCommand("Manage Media", "media") & "</li>" & cr
  pl "<li>" & showlocalCommand("Check for contacts/emails needing attention", "contacts") & "</li>" & cr
  pl "<li>" & showlocalCommand("Upload an image", "upload") & "</li>" & cr
  pl "</ul>"
end index


command updateImageDB
  put todayAsSQL(true, true) into tTimestamp
  repeat for each key K in gData["image_info"]
    put gData["image_info"][K] into tArray
    replace "__" with "_,_" in tArray["tags"]
    -- find if it already exists
    rigDBWhere "folder", tArray["folder"]
    rigDBWhere "name", tArray["name"]
    put rigDBGet("images") into tAQuery
    -- printarray "query", tAQuery
    switch tAQuery["numrows"]
      case 0
        -- new record being added
        put tTimestamp into tArray["date-uploaded"]
        put tTimestamp into tArray["date-modified"]
        get rigDBInsert("images", tArray)
        break
      case 1
        -- record being changed
        put tTimestamp into tArray["date-modified"]
        rigDBWhere "folder", tArray["folder"]
        rigDBWhere "name", tArray["name"]
        get rigDBUpdate("images", tArray)
        break
      default
        pl "too many matches in update" && tArray["folder"] && tArray["name"]
        break
    end switch
  end repeat

end updateImageDB



command upload
  get lcmsIfLoggedIn(sUserName, sIsAdmin)
  commonConfigSettings "upload", FALSE
  pl showlocalCommand("Back to administration home", "") & "<br><br>" & cr
  
  put "form,url" into tHelpers
  rigLoadHelper tHelpers

  getParams
    
  if gData["uploadError"] is not empty AND gData["uploadError"] <> "OK" then
    pl "messages" && ":" & gData["uploadError"] & ":"
  else
    -- we *may* have just done a successful upload

    -- so update the image DB
    updateImageDB
  end if

   -- we want to show the form ready to submit 
   -- starting with any previous errors
  put "Upload Form" into gData["pageTitle"]

--  put rigFormOpenMultiPart("upload/doUpload") into gData["formOpen"]
  put "<form action='/lcms/upload_photo.lc' method='post' accept-charset='utf-8' enctype='multipart/form-data'>" &CR into gData["formOpen"]
  put random(1234) into t1
  put "  <input type='hidden' name='password' value='" & t1 & "'>" & CR after gData["formOpen"]
  put md5hash(t1) into t2
  put "  <input type='hidden' name='checkdigits' value='" & t2 & "'>" & CR after gData["formOpen"]
  put "  <input type='hidden' name='action' value='doUpload'>" & CR after gData["formOpen"]
  
  repeat for each key K in gAdminConfig["photo sizes"]
    put K & "," & gAdminConfig["photo sizes"][K] & CR after tResizes
  end repeat
  put "  <input type='hidden' name='sizes' value='" & tResizes & "'>" & CR after gData["formOpen"]
  
-- now assuming "folder by month" and always on  
  put "  <input type='hidden' name='folder' value='" & gAdminConfig["imageBase"] & "'>" & CR after gData["formOpen"]
  
  
  put makeOptions("Category") into tACategories
  put makeOptions("Tag") into tATags
  
--  put rigFormLabel("Select Category", "select") && rigFormDropDown("select_category", tACategories, tChoice) into gData["upload_category"]
  put the keys of tACategories into tCats
  sort lines of tCats 
  if tSelectCategory is empty then 
    put line 1 of tCats into tChoice
  end if
  replace CR with "," in tCats
  put "Select Category" && myFormSelect("select_category", "", tCats, tChoice) into gData["upload_category"]

  put makeTagsCheckboxes(tATags, tSelectTags) into gData["upload_checkbox"]

  repeat with i = 1 to 4
    put empty into tData
    put myFormInput("", "shortname_"&i, 32, "shortname") into gData["input" & i]
    put empty into tData
    put ("userfile" & i) into tData["name"]
    put "40" into tData["size"]
    put rigFormUpload(tData) after gData["input" & i]
  end repeat
  
  put rigSubmitButton("uploadBtn", "upload") into gData["submit"]
  
  pl "<h1>" & gData["pageTitle"] & "</H1><br>" 
  pl gData["uploadError"]
  pl gData["formOpen"]
--  pl gData["dropDown"]
  pl "<br>" & gData["upload_category"]
  pl "<br>" & gData["upload_checkbox"]
  pl "<br>" & gData["input1"]
  pl "<br>" & gData["input2"]
  pl "<br>" & gData["input3"]
  pl "<br>" & gData["input4"]
  pl "<br /><br />"
  pl gData["submit"]
  pl "</form>"
 
end upload


function makeOptions pCatOrTags
  put empty into tAOptions
  rigDBWhere "TagOrCat", pCatOrTags
  put rigDBGet("TagsCategories") into tAQuery
  repeat with i = 1 to tAQuery["numrows"]
    put rigDBRow(i) into tA
    put tA["Name"] into tAOptions[tA["Name"]]
  end repeat
  if pCatOrTags = "Category" then
    put "-- none --" into tAOptions["-- none --"]
  end if
  return tAOptions
end makeOptions

function makeTagsCheckboxes pATags, pSelectTags, pMetaName
  if pMetaName is empty then put "select" into pMetaName
  put the keys of pATags into tTags
  sort lines of tTags
  repeat for each line L in tTags
    put "_" & pMetaName & "_tag_" & L into tData["name"]
    put L into tData["id"]
    put "accept" into tData["value"]
    put FALSE into tData["checked"]
    if ("_" & L & "_") is among the items of pSelectTags then
      put TRUE into tData["checked"]
    end if
    put rigFormCheckbox(tData) & rigFormLabel(L, L) & CR after tResult
  end repeat
  return tResult
end makeTagsCheckboxes

function filterFor tArray, pKeyStarts, pVal
  local t_local_debug
  -- put TRUE into t_local_debug
  if t_local_debug then pl "filtering" && pKeyStarts && pVal
  if t_local_debug then printarray "filtering", tArray
  put empty into tResult
  repeat for each key K in tArray            
    if K begins with pKeyStarts then
      if pVal is empty OR tArray[K] = pVal then
        put K & "_" after tResult
      end if
    if t_local_debug then pl "filtered " && K && ":" & pVal & ":" & tArray[K] & ":" && tResult
    end if
  end repeat
  replace pKeyStarts with "_" in tResult
  replace "__" with "_,_" in tResult
  if t_local_debug then pl "exit filtering" && tResult

  return tResult
end filterFor

function selectedImages pCategory, pTags
  if (pCategory is not empty) AND (pCategory <> "-- none --") then
    rigDBWhere "Category", pCategory
  end if
  if pTags is not empty then
--    split pTags by ","
--    rigDBWhereIn "tags", pTags
    set the itemDel to ","
    rigDBOpenParenthesis
    put TRUE into tFirst
    repeat for each item K in pTags
      if tFirst then
        rigDBLike "tags", K
        put FALSE into tFirst
      else
        rigDBORLike "tags", K
      end if
    end repeat
    rigDBCloseParenthesis
    
  end if
  put rigDBGet("images") into tAQuery
  repeat with i = 1 to tAQuery["numrows"]
    put rigDBRow(i) into tA
    put tA into tAImages[i]
  end repeat
  return tAImages
end selectedImages

command media
  get lcmsIfLoggedIn(sUserName, sIsAdmin)
  commonConfigSettings "media", FALSE
  pl showlocalCommand("Back to administration home", "") & "<br><br>" & cr
  
  put "form,url" into tHelpers
  rigLoadHelper tHelpers

  
  put makeOptions("Category") into tACategories
  put makeOptions("Tag") into tATags

  -- put TRUE into t_local_debug
  if t_local_debug then printarray "start media", gParams
  
  -- see what has been commanded / changed
  -- media commands are :
  --     select - select a page to edit
  --     update - update currently selected photo(s) with status, categories, etc.
  if gParams["media_command"] is not empty then  
    switch gParams["media_command"]
      case "delete"
      case "hide"
      case "update"
        -- pull all the IDs
        -- pl "doing some kind of update"
        -- printarray "inputs", gParams
        put filterFor(gParams, "_id_image_", "accept") into tChosenImages
        if t_local_debug then pl "chosen" && tChosenImages
        repeat for each item K in tChosenImages
          put char 2 to -2 of K into tID
          put gParams["set_category_" & tID] into tNewCat
          put gParams["shortname_" & tID] into tNewShort
          put filterFor(gParams, "_set_" & tID & "_tag_", "accept") into tChosenTags
          pl tID && tChosenTags && "::" & tNewCat
          put empty into tData
          put tChosenTags into tData["tags"]
          put tNewCat into tData["category"]
          put tNewShort into tData["shortname"]
          rigDBWhere "id", tID
          get rigDBUpdate("images", tData)
        end repeat

        put gParams["images_category"] into tSelectCategory
        put gParams["images_tags"] into tSelectTags
        break

      case "select"
        put gParams["select_category"] into tSelectCategory
        -- printarray "params", gParams
        put filterFor(gParams, "_select_tag_", "accept") into tSelectTags
        -- printarray "selected", tSelectTags
        break
          
      default
        put gParams["images_category"] into tSelectCategory
        put gParams["images_tags"] into tSelectTags
    end switch
  end if     
    
  -- Now we want to show the 'select' form ready to submit 
  -- starting with any previous errors
  put "Manage Media" into gData["pageTitle"]
  
  -- we have a selection form, then a command + thumbnail display form

  put rigFormOpen("lcms_admin/media") into gData["formOpenSelect"]

  if tSelectCategory is empty then 
    put tACategories[line 1 of the keys of tACategories] into tChoice
  end if
  put rigFormLabel("Select Category", "select") && rigFormDropDown("select_category", tACategories, tChoice) into gData["select_category"]

  put makeTagsCheckboxes(tATags, tSelectTags) into gData["select_checkbox"]
  
  put rigSubmitButton("media_command", "Select") into gData["select_submit"]
  
  pl gData["uploadError"]

  pl "<h2>" & "Select / filter" & "</H2>" 
  pl gData["formOpenSelect"]
--  pl gData["dropDown"]
  pl gData["select_category"]
  pl gData["select_checkbox"]
  pl gData["select_submit"]
  pl "</form>"

  -- then generate the action form, including all the selected images

  put rigFormOpen("lcms_admin/media") into gData["formOpenImages"]
  -- hidden info to get back again ....
  put "  <input type='hidden' name='images_category' value='" & tSelectCategory & "'>" & CR after gData["formOpenImages"]
  put "  <input type='hidden' name='images_tags' value='" & tSelectTags & "'>" & CR after gData["formOpenImages"]
  
  -- a bunch of action buttons
--  put rigSubmitButton("media_command", "Hide") into gData["images_submit"]
--  put rigSubmitButton("media_command", "Delete") after gData["images_submit"]
  put rigSubmitButton("media_command", "Update") after gData["images_submit"]
  
  if tSelectCategory is empty then 
    put tACategories[line 1 of the keys of tACategories] into tChoice
  end if
  put rigFormLabel("Set Category", "select") && rigFormDropDown("set_category", tACategories, tChoice) into gData["set_category"]

  put makeTagsCheckboxes(tATags, tSelectTags, "set") into gData["set_checkbox"]

  
  put selectedImages(tSelectCategory, tSelectTags) into tASelected
  repeat with I = 1 to the number of elements in tASelected
    put tASelected[I] into tAImage
    put "_id_image_" & tAImage["id"] into tData["name"]
    put tAImage["id"] into tData["id"]
    put "accept" into tData["value"]
    put FALSE into tData["checked"]
  
    put rigFormCheckbox(tData) after gData["choose_images"]
    --  & rigFormLabel(tASelected[I]["name"], tAImage["name"])  
--    put tAImage["id"] && tAImage["name"] && tAImage["shortname"] after gData["choose_images"]
    put tAImage["id"] && tAImage["name"] & "<br>" after gData["choose_images"]
    put rigFormInput("shortname_" & tAImage["id"], tAImage["shortname"]) after gData["choose_images"]
    put "<img src='/" & tAImage["folder"] & "/thumb/" & tAImage["filename"] & "'>" after gData["choose_images"]
    put "<br>" & CR after gData["choose_images"]
--     put rigSubmitButton("media_command_" & tAImage["id"], "Update") after gData["choose_images"]
    put rigFormLabel("Set Category", "select") && \
        rigFormDropDown("set_category_" & tAImage["id"], tACategories, tAImage["category"]) after gData["choose_images"]
    put makeTagsCheckboxes(tATags, tAImage["tags"], "set_" & tAImage["id"]) after gData["choose_images"]
    put "<br><br>" & CR after gData["choose_images"]
  end repeat

  pl "<h2>" & "Change / edit images" & "</H2>" 
  pl gData["formOpenImages"]

  pl "<br>" & gData["images_submit"]
  pl "<br>" & gData["choose_images"]

  pl "</form>"

 
end media

function showSome pText
  put line 1 to 1 of pText into pText
--  pl "start" && urlencode(pText)
  replace numtochar(10) with CR in pText
  replace "CR" with "<br>" & CR in pText
--  pl "finish" && urlencode(pText)
  return pText
end showSome

--command pages 
--  get lcmsIfLoggedIn(sUserName, sIsAdmin)
--  commonConfigSettings "Pages", TRUE
--  put gParams["extra_segment"] into gParams["page_to_edit"]
--  
--  pl showlocalCommand("Back to administration home", "") & "<br><br>" & cr
--  
--  put "form,url" into tHelpers
--  rigLoadHelper tHelpers
--
--  put TRUE into t_local_debug
--  -- if t_local_debug then printarray "start pages", gParams
--  
--  -- check for any of the select buttons being pressed
--  put filterFor(gParams, "pages_command_", "Select") into tSelectPage
--  if (tSelectPage is not empty) AND (gParams["pages_command"] is empty) then
--    put "Select" into gParams["pages_command"]
--    put char 2 to -2 of tSelectPage into tSelectPage
--  end if
--
--    
--  -- see what has been commanded / changed
--  -- media commands are :
--  --     select - category or tags
--  --     hide / delete / update - update currently selected photo(s) with status, categories, etc.
--  if gParams["pages_command"] is not empty then  
--    switch gParams["pages_command"]
--      case "update"
--        put gParams["title"] into tData["title"]
--        put gParams["type"] into tData["type"]
--        put gParams["content"] into tData["content"]
--        rigDBWhere "id", gParams["page_id"]
--        get rigDBUpdate("Pages", tData)
--
--        printarray "updated" && gParams["page_id"], tData
--        -- fall through
--      case "cancel"
--        put empty into tSelectPage
--        break
--
--      case "select"
--        pl "we are selecting page with id = " && tSelectPage
--        -- printarray "params", gParams
--        break
--          
--      default
--    end switch
--  end if     
--    
--  -- Now we want to show either the list of pages, or an individual page
--
--  if tSelectPage is empty then
--    -- show list of pages
--    put rigFormOpen("lcms_admin/pages") into gData["form"]
--    rigDBOrderby "title", "asc"
--    put rigDBGet("Pages") into tAQuery
--    put "<table classe='table'>" &CR after gData["form"]
--    repeat with i = 1 to tAQuery["numrows"]
--      put rigDBRow(i) into tAPage
--      put "<tr>" &CR after gData["form"] 
--      put "<td>" & rigSubmitButton("pages_command_" & tAPage["id"], "Select") & "</td>" & CR after gData["form"]
--      put "<td>" & tAPage["id"] && "</td>" & CR after gData["form"]
--      put "<td>" & tAPage["title"] & "</td>" & CR after gData["form"]
--      put "<td>" & showSome(tAPage["content"]) & "</td>" & CR after gData["form"]
--      put "</tr>" & CR after gData["form"]
--    end repeat
--    put "</table>" & CR after gData["form"]
--  else
--    put rigFormOpen("lcms_admin/pages") into gData["form"]
--    rigDBWhere "id", tSelectPage
--    put rigDBGet("Pages") into tAQuery
--    put rigDBRow(1) into tAPage
--    put "  <input type='hidden' name='page_id' value='" & tSelectPage & "'>" & CR after gData["form"]
--    
--    put empty into tData
--    put "title" into tData["name"]
--    put "title" into tData["id"]
--    put tAPage["title"] into tData["value"]
--    put "100" into tData["maxlength"]
--    put "50" into tData["size"]
--    put rigFormLabel("Title", "title") && \
--        rigFormInput(tData) & "<br>" & CR after gData["form"]
--    
--    -- TODO dropdown for type !!
--    put empty into tData    
--    put "content" into tData["name"]
--    put "content" into tData["id"]
--    put tAPage["content"] into tData["value"]
--    put "120" into tData["cols"]
--    put "40" into tData["rows"]
--    put rigFormTextArea(tData) & CR after gData["form"]
--
--
--    put "<td>" & rigSubmitButton("pages_command", "Cancel") & "</td>" & CR after gData["form"]
--    put "<td>" & rigSubmitButton("pages_command", "Update") & "</td>" & CR after gData["form"]
--  end if
--  
--  pl gData["form"]
--  pl "</form>"
--
--end pages
--
--command themes 
--  get lcmsIfLoggedIn(sUserName, sIsAdmin)
--  commonConfigSettings "Themes", TRUE
--  put gParams["extra_segment"] into gParams["theme_to_edit"]
--  
--  put "form,url" into tHelpers
--  rigLoadHelper tHelpers
--
--  put TRUE into t_local_debug
--  -- if t_local_debug then printarray "start themes", gParams
--  
--  -- check for any of the select buttons being pressed
--  put filterFor(gParams, "themes_command_", "Select") into tSelectTheme
--  if (tSelectTheme is not empty) AND (gParams["themes_command"] is empty) then
--    put "Select" into gParams["themes_command"]
--    put char 2 to -2 of tSelectTheme into tSelectTheme
--  end if
--
--    
--  -- see what has been commanded / changed
--  -- media commands are :
--  --     select - category or tags
--  --     hide / delete / update - update currently selected photo(s) with status, categories, etc.
--  if gParams["pages_command"] is not empty then  
--    switch gParams["pages_command"]
--      case "update"
--        put gParams["title"] into tData["title"]
--        put gParams["section_name"] into tData["section_name"]
--        put gParams["header"] into tData["header"]
--        put gParams["footer"] into tData["footer"]
--        rigDBWhere "id", gParams["theme_id"]
----        get rigDBUpdate("Themes", tData)
--
--        printarray "updated" && gParams["page_id"], tData
--        -- fall through
--      case "cancel"
--        put empty into tSelectPage
--        break
--
--      case "select"
--        pl "we are selecting theme with id = " && tSelectTheme
--        -- printarray "params", gParams
--        break
--          
--      default
--    end switch
--  end if     
--    
--  -- Now we want to show either the list of themes, or an individual theme
--
--  if tSelectTheme is empty then
--    pl showlocalCommand("Back to administration home", "") & "<br><br>" & cr
--    -- show list of themes
--    put rigFormOpen("lcms_admin/themes") into gData["form"]
--    rigDBOrderby "title", "asc"
--    rigDBOrderby "section_name", "asc"
--    put rigDBGet("Themes") into tAQuery
--    put "<table classe='table'>" &CR after gData["form"]
--    repeat with i = 1 to tAQuery["numrows"]
--      put rigDBRow(i) into tA
--      put "<tr>" &CR after gData["form"] 
--      put "<td>" & rigSubmitButton("themes_command_" & tA["id"], "Select") & "</td>" & CR after gData["form"]
--      put "<td>" & tA["id"] && "</td>" & CR after gData["form"]
--      put "<td>" & tA["title"] & "</td>" & CR after gData["form"]
--      put "<td>" & tA["section_name"] & "</td>" & CR after gData["form"]
----       put "<td>" & showSome(tA["header"]) & "</td>" & CR after gData["form"]
----       put "<td>" & showSome(tA["footer"]) & "</td>" & CR after gData["form"]
--      put "</tr>" & CR after gData["form"]
--    end repeat
--    put "</table>" & CR after gData["form"]
--  else
--    put rigFormOpen("lcms_admin/themes") into gData["form"]
--    rigDBWhere "id", tSelectTheme
--    put rigDBGet("Themes") into tAQuery
--    put rigDBRow(1) into tA
--    put "  <input type='hidden' name='page_id' value='" & tSelectTheme & "'>" & CR after gData["form"]
--    
--    put empty into tData
--    put "title" into tData["name"]
--    put "title" into tData["id"]
--    put tA["title"] into tData["value"]
--    put "100" into tData["maxlength"]
--    put "50" into tData["size"]
--    put rigFormLabel("Title", "title") && \
--        rigFormInput(tData) & CR after gData["form"]
--
--    put empty into tData
--    put "section_name" into tData["name"]
--    put "section_name" into tData["id"]
--    put tA["section_name"] into tData["value"]
--    put "100" into tData["maxlength"]
--    put "50" into tData["size"]
--    put rigFormLabel("Section Name", "section_name") && \
--        rigFormInput(tData) & "<br>" & CR after gData["form"]
--    
--    put empty into tData    
--    put "header" into tData["name"]
--    put "header" into tData["id"]
--    put tA["header"] into tData["value"]
--    put "120" into tData["cols"]
--    put "40" into tData["rows"]
--    put rigFormTextArea(tData)  & "<br>" & CR after gData["form"]
--
--    put empty into tData    
--    put "footer" into tData["name"]
--    put "footer" into tData["id"]
--    put tA["footer"] into tData["value"]
--    put "120" into tData["cols"]
--    put "40" into tData["rows"]
--    put rigFormTextArea(tData) & "<br>" & CR after gData["form"]
--
--
--    put "<td>" & rigSubmitButton("themes_command", "Cancel") & "</td>" & CR after gData["form"]
--    put "<td>" & rigSubmitButton("themes_command", "Update") & "</td>" & CR after gData["form"]
--  end if
--  
--  pl gData["form"]
--  pl "</form>"
--
--end themes
--
--
--

command showJSON
  get lcmsIfLoggedIn(sUserName, sIsAdmin)
  commonConfigSettings
  
  put "Output form DB" into gData["pageTitle"]
  
  repeat for each item K in "boxes,images,Menus,Pages,Themes"
    pl "<h3>" & K & "</h3>"
    put rigDBGet(K) into tAQuery
    repeat with i = 1 to tAQuery["numrows"]
      put rigDBRow(i) into tAA
      -- printarray K && i, tAA
      put ArrayToJSON(tAA) into tJ
      replace "<" with "&lt;" in tJ
      replace "\n" with "<br>" in tJ
      pl K && i && tJ
    end repeat
    pl "<br>"  
  end repeat

end showJSON

-- ----------------------------------------------------------------------------------------------------
-- Support functions for SINGLE style DBs

local sAddURL, sASpec

command startTable
   put "<style>" &CR
   put " table, th, td {" &CR
   put "    border: 1px solid black;" &CR
   put "   }" &CR
   put "</style>" &CR
   put "<table columns='5'>" &CR
end startTable

command myFormFillSingle pA
    
    set the itemDel to comma
    -- Form filling
    put empty into gData["formfill"]

    put lcmsFormStartGeneral("lcms_admin", "dbedit", gParams["_table"]) after gData["formfill"]
    put lcmsFormHidden(pA, "ID,Testing") after gData["formfill"]
    set the lineDel to ":"
    replace CR with ":" in sASpec["spec"]
    repeat for each line L in sASpec["spec"]
      if L is empty then next repeat
      put item 3 of L into tLength
      switch item 2 of L

        case "Hidden"
          put  lcmsFormHidden(pA, item 1 of L) after gData["formfill"]
          break
          
        case empty
          put 32 into tLength -- default type / size for fields
        case "Input"
          put lcmsFormInput(pA, item 1 of L, tLength) after gData["formfill"]
          break
          
        case "Output"
          put lcmsFormInput(pA, item 1 of L, tLength) after gData["formfill"]
          break
          
        case "area"
          put lcmsFormTextArea(pA, item 1 of L, tLength, item 4 of L) after gData["formfill"]
    	  break
    	
    	default
    	  put "Can't understand line" && L &CR after gData["formfill"]
      end switch
    end repeat

    put lcmsFormButton("text_box_right", "Submit") after gData["formfill"]
    put lcmsFormButton("text_box_right", "Cancel") after gData["formfill"]
    
    put lcmsFormEnd() after gData["formfill"]

end myFormFillSingle


command showSummarySingle pMessage, pFilter

  if pMessage is not empty then
    put "<strong>" & pMessage & "</strong><p><br>" &CR
  end if
  put sBaseURL & "/dbedit/" & gParams["_table"] into tURL
  -- get all of them
  put empty into tA
  
  put "<h1>Editing or viewing" && gParams["_table"] & "</h1>" & CR
  put sAddURL &CR
  
  put "ID" & comma & sASpec["Summary"] into tColumns

  if rigDBFieldExists("STATUS", gParams["_table"]) then
    put ",status" after tColumns
  end if
  rigDBSelect (tColumns)
 
  if sASpec["SortOrder"] is not empty then
      rigDBOrderBy sASpec["SortOrder"]
  else
    repeat for each item II in sASpec["Summary"]
      rigDBOrderBy II, "asc"
    end repeat
  end if
  put rigDBGet(gParams["_table"]) into tAQuery
  -- printarray "query", tAQuery
  if tAQuery["numrows"] > 0 then
    startTable
    repeat with i = 1 to tAQuery["numrows"]
      put rigDBRow(i) into tA
      -- printarray "this", tA
      put "<tr>" 
      repeat for each item II in sASpec["Summary"]
        if II = "Date" then
          replace "0000-00-00" with empty in tA[II]
          replace "00:00:00" with empty in tA[II]          
        end if
        put "<td><strong>" & tA[II] & "</strong></td>"
      end repeat
      put  CR

      repeat for each item II in "edit" -- "edit,view"
        put "  <td><a href='" & tURL & "/" & tA["ID"] & "/" & II & "'>" & II & "</a></td>" & CR
      end repeat
      if rigDBFieldExists("STATUS", gParams["_table"]) then
        repeat for each item II in "archive,publish,draft"
          if II <> tA["STATUS"] then 
            put "  <td><a href='" & tURL & "/" & tA["ID"] & "/" & II & "'>" & II & "</a></td>" & CR
          else
            put "<td> </td>" &CR
          end if
        end repeat
      end if
    put "</tr>" & CR
    end repeat
    put "</table><p><br>" & CR & CR
  else
    put "No matching records found" & cr
  end if
end showSummarySingle


function exactlyTheSame pA, pB
  set the casesensitive to true
  return pA = pB
end exactlyTheSame

function maybeFetchSegment pN, pElse
  put rigFetchSegment(pN) into tt
  if tt is not false then
    return tt
  end if
  return pElse
end maybeFetchSegment

-- ----------------------------------------------------------------------------------------------------
-- DBEDIT 

command dbedit
    get lcmsIfLoggedIn(sUserName, sIsAdmin)
	commonConfigSettings
    pl showlocalCommand("Back to administration home", "") & "<br><br>" & cr
    pl showlocalCommand("Edit a different database", "dbedit") & "<br><br>" & cr

	rigLoadHelper "form"
	
	getParams
--	printarray "in dbedit", gParams

	put maybeFetchSegment(3, gParams["_table"]) into gParams["_table"]
    put maybeFetchSegment(4, gParams["ID"]) into gParams["ID"]
    put maybeFetchSegment(5, gParams["action"]) into gParams["action"]
--??--    put gParams["_detail"] into gParams["_table"]
--??--	printarray "gP", gParams
	if gParams["_table"] is empty then 
	  -- no table specified - give list of table choices as urls
      get rigLoadDatabase()
      
      -- get the editing specification for all tables
      put rigDBGet("objects_spec") into tAQuery

	  put sBaseURL & "/dbedit" into tURL
      if tAQuery["numrows"] > 0 then

  	    repeat with ii = 1 to tAQuery["numrows"]
  	      put rigDBRow(ii) into tA
  	      put tA["TableName"] into K
  	      put "<p><strong>" & K & "</strong> " & "&nbsp;"  
          put "<a href='" & tURL & "/" & K & "'>View</a> " & "&nbsp;"
  	    end repeat
  	    put "<br><br>" & CR
  	  end if
	  exit dbedit
	end if

	-- OK so we have a table
	put sBaseURL & "/dbedit/" & gParams["_table"] into tURL
    put "<a href='" & tURL & "//plus'>Add an entry</a>" into sAddURL    
    get rigLoadDatabase()
    
    -- get the editing specification for this table
    put empty into tA
    put gParams["_table"] into tA["tablename"]
    put rigDBGetWhere("objects_spec", tA) into tAQuery
    --printarray"edit spec", tAQuery
    put rigDbRow(1) into sASpec    
    --printarray "spec", sASpec
    
    -- this should have defined for us
    --  summary (what to show in the summary page to allow selection)
    --  spec (lines of column, type, details)

    -- NB we always use "ID" to identify one to be edited, so
    --    if no ID specified, 
    -- OR if we were editing, and did a "cancel" 
    --     then we show the summary page with URL links
    
    if (gParams["ID"] is empty) then
      showSummarySingle "", gParams["ID"] 
      exit dbedit
    end if

    -- HERE when handling a specific item
    if gParams["ID"] = "plus" then
      put rigDbListFields(gParams["_table"]) into tFields
      repeat for each key K in tFields
        put empty into tARow[ tFields[K] ]
      end repeat
      put "plus" into tARow["ID"]
    else
      put empty into tAID
      -- load the current item to be displayed
      put gParams["ID"] into tAID["id"]
      put rigDBGetWhere(gParams["_table"], tAID) into tAQuery
      --printarray"qqq", tAQuery
      put rigDbRow(1) into tARow
    end if
    --printarray "the row", tARow
    
    switch gParams["action"]
      case "cancel"
        put "Edit cancelled" into tMessage
        showSummarySingle tMessage
        exit dbedit
    
      case "Submit" 
        -- this is the interesting one - changes submitted
        -- if (valid) then store it
        put empty into tData
        set the wholeMatches to true
        repeat for each key K in tARow
          if NOT exactlyTheSame(gParams[K], tARow[K]) then 
--              pl "updated entry " && K && "to" && gParams[K] && "::" && tARow[K]
              put trim(unescapeHTMLChars(gParams[K])) into tData[K]
          end if
        end repeat
        if tData is an array then
          pl "changes made !!"
	      put tData into tOut
	      put gParams["ID"] into tOut["ID"]
	      put gParams["_table"] && the internet date &CR into tRes
	      put outArray(tOut) after tRes
	      put tRes &CR &CR after URL("file:" & the defaultfolder & "/db_changes_log.txt")
 
          if gParams["ID"] = "plus" then
            put rigDbInsert(gParams["_table"], tData) into ttt
          else
            rigDBWhere "id", gParams["ID"]
            get rigDBUpdate(gParams["_table"], tData)
          end if
          put rigDBGetWhere(gParams["_table"], tAID) into tAQuery
          put rigDbRow(1) into tARow
        end if
        showSummarySingle "Edit submitted successfully"
        exit dbedit
        break

      case "archive"
      case "publish"
      case "draft"
        put empty into tData
        put gParams["action"] into tData["STATUS"]
        rigDBWhere "id", gParams["ID"]
        get rigDBUpdate(gParams["_table"], tData)
        put rigDBGetWhere(gParams["_table"], tAID) into tAQuery
        --printarray"qqq", tAQuery
        put rigDbRow(1) into tARow
        showSummarySingle "Status of entry" && gParams["ID"] && "set to" && gParams["action"]
        exit dbedit
      
      case "view"
        showSummarySingle "action was set to View which currently does nothing"
        exit dbedit
      
      default
        -- not a submit - must be a first entry into edit mode
    end switch
  	  
  	  
    repeat for each key K in tARow
      put tARow[K] into gData["params"][K]
    end repeat
           
    myFormFillSingle tARow
  	
    --printarray "gdata before loading", gData
    -- pl "and load view" && the number of chars in gData["formfill"]

    pl gData["formfill"]


end dbedit

